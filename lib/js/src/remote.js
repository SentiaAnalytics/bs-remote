// Generated by BUCKLESCRIPT VERSION 1.9.0, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");

function encoder(errEncoder, valueEncoder, value) {
  if (typeof value === "number") {
    if (value) {
      return "Pending";
    } else {
      return "NotAsked";
    }
  } else if (value.tag) {
    return Curry._1(valueEncoder, value[0]);
  } else {
    return Curry._1(errEncoder, value[0]);
  }
}

function map(f, remote) {
  if (typeof remote === "number") {
    if (remote) {
      return /* Pending */1;
    } else {
      return /* NotAsked */0;
    }
  } else if (remote.tag) {
    return /* Ready */Block.__(1, [Curry._1(f, remote[0])]);
  } else {
    return /* Error */Block.__(0, [remote[0]]);
  }
}

function chain(f, remote) {
  if (typeof remote === "number") {
    if (remote) {
      return /* Pending */1;
    } else {
      return /* NotAsked */0;
    }
  } else if (remote.tag) {
    return Curry._1(f, remote[0]);
  } else {
    return /* Error */Block.__(0, [remote[0]]);
  }
}

function isNotAsked(remote) {
  if (typeof remote === "number" && remote === 0) {
    return /* true */1;
  } else {
    return /* false */0;
  }
}

function isPending(remote) {
  if (typeof remote === "number" && remote !== 0) {
    return /* true */1;
  } else {
    return /* false */0;
  }
}

function isError(remote) {
  if (typeof remote === "number" || remote.tag) {
    return /* false */0;
  } else {
    return /* true */1;
  }
}

function isReady(remote) {
  if (typeof remote === "number" || remote.tag !== 1) {
    return /* false */0;
  } else {
    return /* true */1;
  }
}

exports.encoder    = encoder;
exports.map        = map;
exports.chain      = chain;
exports.isNotAsked = isNotAsked;
exports.isPending  = isPending;
exports.isError    = isError;
exports.isReady    = isReady;
/* No side effect */
