// Generated by BUCKLESCRIPT VERSION 1.9.0, PLEASE EDIT WITH CARE
'use strict';

var Tape   = require("./tape.js");
var Block  = require("bs-platform/lib/js/block.js");
var Curry  = require("bs-platform/lib/js/curry.js");
var Remote = require("../src/remote.js");

Tape.test("isNotAsked should return true if NotAsked", (function (t) {
        Curry._1(t[/* plan */0], 1);
        return Curry._1(t[/* ok */1], Remote.isNotAsked(/* NotAsked */0));
      }));

Tape.test("isPending should return true if pending", (function (t) {
        Curry._1(t[/* plan */0], 1);
        return Curry._1(t[/* ok */1], Remote.isPending(/* Pending */1));
      }));

Tape.test("isError should return true if ready", (function (t) {
        Curry._1(t[/* plan */0], 1);
        return Curry._1(t[/* ok */1], Remote.isError(/* Error */Block.__(0, ["Err"])));
      }));

Tape.test("isReady should return true if ready", (function (t) {
        Curry._1(t[/* plan */0], 1);
        return Curry._1(t[/* ok */1], Remote.isReady(/* Ready */Block.__(1, ["ready"])));
      }));

Tape.test("map should map ready values", (function (t) {
        Curry._1(t[/* plan */0], 1);
        var match = Remote.map((function (n) {
                return n + 1 | 0;
              }), /* Ready */Block.__(1, [5]));
        var tmp;
        tmp = typeof match === "number" || match.tag !== 1 ? /* false */0 : +(match[0] === 6);
        return Curry._1(t[/* ok */1], tmp);
      }));

Tape.test("map should do nothing for non ready values", (function (t) {
        Curry._1(t[/* plan */0], 1);
        var actual = Remote.map((function (n) {
                return n + 1 | 0;
              }), /* Pending */1);
        return Curry._1(t[/* ok */1], Remote.isPending(actual));
      }));

Tape.test("chain should chain ready values", (function (t) {
        Curry._1(t[/* plan */0], 1);
        var actual = Remote.chain((function () {
                return /* Error */Block.__(0, ["some error"]);
              }), /* Ready */Block.__(1, [5]));
        var tmp;
        tmp = typeof actual === "number" || actual.tag ? /* false */0 : +(actual[0] === "some error");
        return Curry._1(t[/* ok */1], tmp);
      }));

Tape.test("chain should do nothing for non ready values", (function (t) {
        Curry._1(t[/* plan */0], 1);
        var actual = Remote.chain((function (n) {
                return /* Ready */Block.__(1, [n + 1 | 0]);
              }), /* Pending */1);
        return Curry._1(t[/* ok */1], Remote.isPending(actual));
      }));

/*  Not a pure module */
